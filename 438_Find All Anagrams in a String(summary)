public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
       List<Integer> res = new ArrayList<>();
        Map<Character, Integer> map = new HashMap<>();
        for(char c: p.toCharArray()) map.put(c,map.getOrDefault(c,0)+1);
        //int[] map = new int[256];

        int counter = map.size();//very important for understand. it is the mark of potential subststing within the silding window if it =0

        int left = 0, right = 0;

        while(right < s.length()){
            char c = s.charAt(right);
            if(map.containsKey(c)){
                map.put(c,map.get(c) - 1);
                if(map.get(c) == 0) counter--;
            }
            right++;
            //counter equals"0", we will shrink the window from the left
            // how to shrink? along shrinkng, we need to exam two conditions.
            //one is if wew have proper number of char to consist 'p', that is first if statemenr does
            // another is to check if the length between left and right equals p.length
            // if satififies both, we find one index within the current window!
            while(counter == 0){
                char c_l = s.charAt(left);
                if(map.containsKey(c_l)){
                    map.put(c_l, map.get(c_l)+1);
                    if(map.get(c_l) > 0){
                        counter++;   //once counter not equals '0', we need to resize our windows
                                     // since there is no possibility to find a another index of valid anargam
                    }
                }
                if(right-left == p.length()) res.add(left);
                left++;
            }

        }
        return res;
    }
}




class Solution {
    public List<Integer> findAnagrams(String s, String p) {

        List<Integer> res = new ArrayList<>();
        Map<Character, Integer> map = new HashMap<>();

        for(int i = 0; i < p.length(); i++){
            char c = p.charAt(i);
            if(!map.containsKey(c)){
                map.put(c,1);
            }else{
                int temp = map.get(c);
                map.put(c, temp + 1);
            }
        }

        int i = 0;
        int interval = p.length() ;

        while( i+interval <= s.length()){
             Map<Character, Integer> map2 = new HashMap<>();
            String sub = s.substring(i,i+interval);

            for(int j = 0; j < interval; j++){
                char c = sub.charAt(j);
                if(!map2.containsKey(c)){
                    map2.put(c,1);
                }else{
                int temp = map2.get(c);
                map2.put(c, temp + 1);
              }
            }

            int mark = 0;
            for(int k = 0;k < interval; k++){
                char c = sub.charAt(k);
                if(map.containsKey(c) && map2.containsKey(c) && map.get(c) == map2.get(c)){
                   continue;
                }else{
                    mark = -1;
                }
           }
            if(mark == 0) res.add(i);
            i++;

    }

        return res;
   }
}
