class MyQueue {
    private Deque<Integer> stack1;
    private Deque<Integer> stack2;
    /** Initialize your data structure here. */
    public MyQueue() {
        stack1 = new ArrayDeque<Integer>();
        stack2 = new ArrayDeque<Integer>();
    }

    /** Push element x to the back of queue. */
    public void push(int x) {
        stack1.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        while (!stack1.isEmpty()) {
            int ele = stack1.pop();
            stack2.push(ele);
        }
       int res = stack2.pop();

        while (!stack2.isEmpty()){
            int ele = stack2.pop();
            stack1.push(ele);
        }
        return res;
    }

    /** Get the front element. */
    public int peek() {
        while (!stack1.isEmpty()) {
            int ele = stack1.pop();
            stack2.push(ele);
        }
       int res = stack2.peek();

        while (!stack2.isEmpty()){
            int ele = stack2.pop();
            stack1.push(ele);
        }
        return res;
    }

    /** Returns whether the queue is empty. */
    public boolean empty() {
        return stack1.isEmpty();
    }
}
