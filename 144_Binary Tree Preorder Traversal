class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
       ArrayList<Integer> list = new ArrayList<>();
       Deque<TreeNode> stack = new ArrayDeque<>();

       while(root != null){
           list.add(root.val);
           if(root.right != null) stack.push(root.right);
           root = root.left;

           if(root == null && !stack.isEmpty()){
               root = stack.pop();
           }
       }
     return list;
    }


}

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
       ArrayList<Integer> list = new ArrayList<>();

        return preorder(root, list);
    }

    public ArrayList<Integer> preorder(TreeNode root, ArrayList<Integer> list){
        if(root == null) return list;

        list.add(root.val);
        preorder(root.left, list);
        preorder(root.right, list);
        return  list;
    }
}
